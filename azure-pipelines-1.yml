trigger:
  - main

resources:
  - repo: self

variables:
  - group: my-variable-group-01

stages:
  - stage: Build
    displayName: Build image
    jobs:
      - job: Build
        displayName: Build
        pool: "my-laptop-agent"
        steps:
          - script: |
              echo $(replicaNum) 
              echo $(imageRepo)
              echo $(databaseURL)
              echo $(frontend-API)
              echo $(backend-API)
              echo $(server-port)

          - task: DockerCompose@0
            inputs:
              containerregistrytype: 'Azure Container Registry'
              azureSubscription: 'Visual Studio Enterprise Subscription â€“ MPN(d957954d-fa30-4f4d-aed1-d1aea92276c7)'
              azureContainerRegistry: '{"loginServer":"myappacr1998001.azurecr.io", "id" : "/subscriptions/d957954d-fa30-4f4d-aed1-d1aea92276c7/resourceGroups/aks-rg/providers/Microsoft.ContainerRegistry/registries/myappacr1998001"}'
              dockerComposeFile: '$(Build.SourcesDirectory)/docker-compose.yml'
              action: 'Run a Docker Compose command'
              
          - task: PublishPipelineArtifact@1
            inputs:
              targetPath: "$(Pipeline.Workspace)/s/aksManifestFile.yaml"
              artifact: "manifests"
              publishLocation: "pipeline"

          - task: PublishPipelineArtifact@1
            inputs:
              targetPath: "$(Pipeline.Workspace)/s/src/config.jsx"
              artifact: "manifests2"
              publishLocation: "pipeline"             
  - stage: Deploy
    displayName: Deploy to Dev
    variables:
      acr-devurl: "myappacr1998001.azurecr.io"
      acr-secret: aks-example-auth
      replicaNo: $(replicaNum)
      dbURL: $(databaseURL)
      frontendAPI: $(backend-API)
      backendAPI: $(frontend-API)
      serverPort: $(server-port)
    dependsOn: Build
    jobs:
      - deployment: Deploy
        displayName: Deploy to AKS
        environment: "Andy989824NoventiqExerciseRepo-01.default"
        pool: "my-laptop-agent"
        strategy:
          runOnce:
            deploy:
              steps:
                - task: DownloadPipelineArtifact@2
                  inputs:
                    buildType: "current"
                    artifactName: "manifests"
                    targetPath: "$(Pipeline.Workspace)/manifests"
                - task: DownloadPipelineArtifact@2
                  inputs:
                    buildType: "current"
                    artifactName: "manifests2"
                    targetPath: "$(Pipeline.Workspace)/manifests2"
                - task: KubernetesManifest@1
                  inputs:
                    action: "createSecret"
                    namespace: "default"
                    secretType: "dockerRegistry"
                    secretName: "$(acr-secret)"
                    dockerRegistryEndpoint: "myappacr1998001"

                - task: replacetokens@5
                  displayName: Replace Token (replica number)
                  inputs:
                    rootDirectory: "$(Pipeline.Workspace)/manifests"
                    targetFiles: "aksManifestFile.yaml"
                    encoding: "auto"
                    tokenPattern: "custom"
                    tokenPrefix: "#"
                    tokenSuffix: "#"
                    writeBOM: true
                    actionOnMissing: "warn"
                    keepToken: false
                    actionOnNoFiles: "continue"
                    enableTransforms: false
                    enableRecursion: false
                    useLegacyPattern: false
                    enableTelemetry: true

                - task: replacetokens@5
                  displayName: Replace Tokens (Database URL)
                  inputs:
                    rootDirectory: "$(Pipeline.Workspace)/manifests2"
                    targetFiles: "config.jsx"
                    encoding: "auto"
                    tokenPattern: "custom"
                    tokenPrefix: "#"
                    tokenSuffix: "#"
                    writeBOM: true
                    actionOnMissing: "fail"
                    keepToken: false
                    actionOnNoFiles: "continue"
                    enableTransforms: false
                    enableRecursion: false
                    useLegacyPattern: false
                    enableTelemetry: true

                - task: replacetokens@5
                  displayName: Replace Tokens (app host)
                  inputs:
                    rootDirectory: "$(Pipeline.Workspace)/manifests2"
                    targetFiles: "App.js"
                    encoding: "auto"
                    tokenPattern: "custom"
                    tokenPrefix: "#"
                    tokenSuffix: "#"
                    writeBOM: true
                    actionOnMissing: "warn"
                    keepToken: false
                    actionOnNoFiles: "continue"
                    enableTransforms: false
                    enableRecursion: false
                    useLegacyPattern: false
                    enableTelemetry: true

                - task: replacetokens@5
                  displayName: Replace Tokens (server host)
                  inputs:
                    rootDirectory: "$(Pipeline.Workspace)/manifests2"
                    targetFiles: "server.js"
                    encoding: "auto"
                    tokenPattern: "custom"
                    tokenPrefix: "#"
                    tokenSuffix: "#"
                    writeBOM: true
                    actionOnMissing: "warn"
                    keepToken: false
                    actionOnNoFiles: "continue"
                    enableTransforms: false
                    enableRecursion: false
                    useLegacyPattern: false
                    enableTelemetry: true

                - task: KubernetesManifest@0
                  inputs:
                    action: 'deploy'
                    namespace: 'default'
                    manifests: '$(Pipeline.Workspace)/manifests/aksManifestFile.yaml'


